{"name":"Mirage","tagline":"Complext test automation made easy","body":"Mirage\r\n======\r\n\r\n[![Build Status](https://travis-ci.org/SpectoLabs/mirage.png?branch=master)](https://travis-ci.org/SpectoLabs/mirage)\r\n[![Documentation Status](https://readthedocs.org/projects/mirage/badge/?version=latest)](http://mirage.readthedocs.org/en/latest/?badge=latest)\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/SpectoLabs/mirage?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\r\n\r\nEnable automated testing by mastering system dependencies.\r\nUse when reality is simply not good enough.\r\n\r\n## Documentation\r\n\r\n\r\nSee the The documentation [readthedocs](<http://mirage.readthedocs.org/en/latest/?badge=latest/>) to view\r\nuser documentation.\r\n\r\n\r\n## Install and run (Docker + Docker Compose)\r\n\r\nInstall Docker and Docker Compose.\r\n\r\n* cd to project root\r\n* docker-compose up\r\n* [http://localhost:8001] or if you are using boot2docker (Mac OSX) - check VM's IP address with command:\r\n  $ boot2docker ip\r\n\r\n## Install (Manual)\r\n\r\n(Linux Red Hat Enterprise, CentOS, Fedora, or Amazon Linux). It's easier when using python virtualenv wrapper, get more \r\ninformation about installing and using it here: [https://virtualenvwrapper.readthedocs.org/en/latest/]\r\n\r\nRedis Server Installation::\r\n\r\n    $ sudo yum install redis-server\r\n    $ sudo service redis-server start\r\n\r\nMongo server Installation::\r\n\r\n    $ sudo yum install mongodb-org\r\n    $ sudo service mongod start | stop\r\n\r\ndependencies::\r\n\r\n    $ sudo yum install python27-virtualenv libxslt libxslt-devel libxml2 libxml2-devel texlive-full\r\n\r\n\r\n(Linux Ubuntu) \r\n\r\nRedis Server Installation::\r\n\r\n    $ sudo apt-get install -y redis-server\r\n    $ sudo service redis-server start\r\n\r\nMongo server Installation::\r\n\r\n    $ sudo apt-get install -y mongodb-org\r\n    $ sudo service mongod start | stop\r\n    \r\ndependencies::\r\n\r\n    $ sudo apt-get install -y python-dev python-pip wget python2.7-dev libxml2 libxml2-dev libxslt1-dev\r\n    \r\nDownload application:\r\n\r\n       \r\n    (env) $ git clone https://github.com/Stub-O-Matic/stubo-app.git\r\n    \r\n    (env) $ cd stubo-app\r\n    \r\n    (env) $ mkv\r\n    \r\n    (env) $ pip install -r requirements/development.txt  (in production environment use pip install -r requirements.txt)\r\n    \r\n\r\n> Installing lxml library on OSX:\r\n> export CFLAGS=-Qunused-arguments\r\n> export CPPFLAGS=-Qunused-arguments\r\n>\r\n> pip install lxml\r\n> or following if installing globally\r\n> sudo pip install lxml\r\n\r\n### RUN\r\n\r\nPerform the following::\r\n\r\n    $ sudo service mongod start\r\n    $ sudo service redis-server start\r\n\r\nActive your virtual python env:\r\n\r\n    $ workon env\r\n    \r\nLaunch run.py in project root:\r\n   \r\n    $ python run.py\r\n    \r\nLogs are in _PROJECT_ROOT_/log/stubo.log\r\nDefault config is picked up from _PROJECT_ROOT_/dev.ini     \r\nAlternatively you can run from another location:\r\n\r\n    (env) $ python run.py -c path_to_config\r\n\r\n\r\n## FUNCTIONAL TESTING\r\n\r\nYou can run the test suite by running the following command \r\n(in the project root: stubo-app)::\r\n\r\n        (env) $ nosetests stubo\r\n\r\nUse the ``-x`` flag to stop the tests at the first error::\r\n\r\n        (env) $ nosetests stubo -x\r\n        \r\nOr to run a specific test:\r\n\r\n         (env) $ nosetests stubo.tests.integration.test_api:TestAcceptance.test_exec_first_commands\r\n\r\nUse the ``--with-coverage`` flag to display a coverage report after\r\nrunning the tests, this will show you which files / lines have not\r\nbeen executed when the tests ran::\r\n\r\n        (env) $ nosetests stubo --with-coverage --cover-package=stubo\r\n\r\nOr to run a specific test:\r\n\r\n        (env) $ nosetests stubo.tests.integration.test_api:TestAcceptance.test_exec_first_commands\r\n        \r\nand code analysis \r\n\r\n        (env) $ pylint stubo\r\n        \r\n## DEBUGGING\r\n\r\nIf you want to call functions to debug in a python shell and they have a \r\ndependency on redis or mongo you must initialise them first\r\n\r\n    from stubo.utils import start_redis\r\n    slave, master = start_redis({})\r\n    slave\r\n    <redis.client.Redis object at 0x10168e650> \r\n    \r\n    from stubo.utils import init_mongo\r\n    dbclient = init_mongo()\r\n    dbclient\r\n    Database(MongoClient('localhost', 27017), u'stubodb')\r\n\r\nNow you can make calls that use redis\r\n\r\n    >>> from stubo.cache import Cache\r\n    >>> cache = Cache(host='localhost')\r\n    >>> cache.get_session('first', 'first_1')\r\n        {u'status': u'dormant', u'system_date': u'2015-02-24', u'scenario': u'localhost:first', u'last_used': u'2015-02-24 11:19:21', u'scenario_id': u'54ec5e3981875908f911a71b', u'session': u'first_1'}\r\n\r\n& mongodb\r\n\r\n    from stubo.model.db import Scenario\r\n    scenario = Scenario()\r\n    stubs = list(scenario.get_stubs('localhost:first'))\r\n    import pprint\r\n    pp = pprint.PrettyPrinter(indent=4)\r\n    pp.pprint(stubs[0])\r\n    {   u'_id': ObjectId('537c8f1cac5f7303ad704d85'),\r\n        u'scenario': u'localhost:first',\r\n        u'stub': {   u'recorded': u'2014-05-21',\r\n                     u'request': {   u'bodyPatterns': [   {   u'contains': [   u'get my stub\\n']}],\r\n                                     u'method': u'POST'},\r\n                     u'response': {   u'body': u'Hello {{1+1}} World\\n',\r\n                                      u'delayPolicy': u'slow',\r\n                                      u'status': 200}}}\r\n    \r\n    from stubo.model.db import Tracker\r\n    tracker = Tracker()\r\n    list(tracker.find_tracker_data({'function' : 'get/response'}, 0, 1))\r\n    [{u'function': u'get/response', u'scenario': u'conv', u'start_time': datetime.datetime(2013, 10, 29, 10, 38, 16, 534000, tzinfo=<bson.tz_util.FixedOffset object at 0x1015b6910>), u'return_code': 200, u'session': u'mary', u'duration_ms': 5, u'stubo_response': u'a2 response\\n', u'_id': ObjectId('526f90180cfb4403fc27c0fa')}]\r\n       \r\n        \r\n## PERFORMANCE TESTING\r\n\r\nLoad performance test data (over 10,000 stubs in 100 scenarios) with \r\n\r\n        stubo/api/exec/cmds?cmdfile=/static/cmds/perf/perf_setup.commands \r\n        this will take some time to run and leaves 100 sessions in playback mode.\r\n\r\n        optionally demonstrate that the load was successfull with:\r\n        stubo/api/exec/cmds?cmdfile=/static/cmds/perf/perf_getresponse.commands\r\n        this gets one response from each session.\r\n\r\n        When finished end sessions and delete stubs with:\r\n        stubo/api/exec/cmds?cmdfile=/static/cmds/perf/perf_teardown.commands\r\n\r\n## DOCUMENTATION\r\n\r\nDocumentation is generated with Sphinx. The doc sources are located under /docs.\r\n\r\nprerequisites for generating PDF:\r\n\r\n    $ yum install texlive\r\n\r\nTo generate docs\r\n\r\n    (env) $ python setup.py build_sphinx --build-dir=./stubo/static/docs\r\n\r\nTo generate PDF\r\n\r\n       $ cd docs\r\n       $ make latexpdf\r\n       $ cp _build/latex/Stub-O-Matic.pdf ../stubo/static/docs\r\n\r\n## PROFILING\r\n\r\nMirage profiling is available via two different profilers yappi and plop. \r\n\r\nyappi function stats\r\n\r\n    name: name of the function being profiled\r\n    #n: is the total callcount of the function.\r\n    tsub: total spent time in the function minus the total time spent in the other functions called from this function.\r\n    ttot: total time spent in the function.\r\n    tavg: is same as ttot/ccnt. Average total time.\r\n\r\nPlop is a stack-sampling profiler for Python. Profile collection can be turned on and off in a live process with minimal performance impact.\r\n\r\nBoth profilers are enabled via an HTTP inteface in stubo.\r\n\r\nyappi - generate stats for 3 mins, output is saved to a csv file: \r\n\r\n    _profile?interval=180\r\n\r\nplop - generate stats for 3 mins, output is saved by default to /tmp/plop.out:\r\n    \r\n    _profile2?interval=180&output=/tmp/plop.out\r\n\r\nTo view plop results in a bubble graph:\r\n\r\n    (env) $ python -m plop.viewer --datadir=/tmp\r\n\r\nView via the plop app at http://localhost:8888\r\n\r\n### Authors\r\n\r\nMirage is made available by [OpenCredo](http://opencredo.com)\r\nand a team of contributors.\r\n\r\n### License\r\n\r\nMirage is offered under GPLv3, see LICENSE for more details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}